import os
import sys
from rouge import Rouge 
from collections import defaultdict
import numpy as np
import sys
from metrics import calc_nlp_metrics

def write_xml(paths_in, path_out, role, n_lines=None):
    lines = [
        '<?xml version="1.0" encoding="UTF-8"?>',
        '<!DOCTYPE mteval SYSTEM "">',
        '<!-- generated by https://github.com/golsun/NLP-tools -->',
        '<!-- from: %s -->'%paths_in,
        '<!-- as inputs for ftp://jaguar.ncsl.nist.gov/mt/resources/mteval-v14c.pl -->',
        '<mteval>',
        ]

    for i_in, path_in in enumerate(paths_in):
        
        # header ----
        if role == 'src':
            lines.append('<srcset setid="unnamed" srclang="src">')
            set_ending = '</srcset>'
        elif role == 'hyp':
            lines.append('<tstset setid="unnamed" srclang="src" trglang="tgt" sysid="unnamed">')
            set_ending = '</tstset>'
        elif role == 'ref':
            lines.append('<refset setid="unnamed" srclang="src" trglang="tgt" refid="ref%i">'%i_in)
            set_ending = '</refset>'
        
        lines.append('<doc docid="unnamed" genre="unnamed">')
        
        # body -----
        if role == 'src':
            body = [''] * n_lines
        else:
            with open(path_in, 'r', encoding='utf-8') as f:
                body = f.readlines()
            f.close()
            if n_lines is not None:
                body = body[:n_lines]
        for i in range(len(body)):
            line = body[i].strip('\n')
            line = line.replace('&',' ').replace('<',' ')		# remove illegal xml char
            if len(line) == 0:
                line = '__empty__'
            lines.append('<p><seg id="%i"> %s </seg></p>'%(i + 1, line))
        
        # ending -----
        lines.append('</doc>')
        if role == 'src':
            lines.append('</srcset>')
        elif role == 'hyp':
            lines.append('</tstset>')
        elif role == 'ref':
            lines.append('</refset>')
    
    lines.append('</mteval>')
    with open(path_out, 'w', encoding='utf-8') as f:
        f.write(str('\n'.join(lines)))
    f.close()
    return

def write_nist_file(path_refs, path_hyp, path_posts):
    if not os.path.exists('nist'):
        os.makedirs('nist')
    n_lines = len(open(path_hyp, encoding='utf-8').readlines())	
    write_xml([''], 'nist/src.xml', 'src', n_lines=n_lines)
    write_xml([path_hyp], 'nist/hyp.xml', 'hyp', n_lines=n_lines)
    write_xml(path_refs, 'nist/ref.xml', 'ref', n_lines=n_lines)
    write_xml(path_posts, 'nist/post.xml', 'ref', n_lines=n_lines)
    return


def calc_entropy(hyp):
    # based on Yizhe Zhang's code
    etp_score = [0.0,0.0,0.0,0.0]
    counter = [defaultdict(int), defaultdict(int), defaultdict(int), defaultdict(int)]
    i = 0
    for line in hyp:
        i += 1
        words = line.strip('\n').split()
        for n in range(4):
            for idx in range(len(words)-n):
                ngram = ' '.join(words[idx:idx+n+1])
                counter[n][ngram] += 1

    for n in range(4):
        total = sum(counter[n].values())
        for v in counter[n].values():
            etp_score[n] += - v /total * (np.log(v) - np.log(total))

    return etp_score

def calc_diversity(hyp):
    tokens = [0.0,0.0]
    types = [defaultdict(int),defaultdict(int)]
    for line in hyp:
        words = line.strip('\n').split()
        for n in range(2):
            for idx in range(len(words)-n):
                ngram = ' '.join(words[idx:idx+n+1])
                types[n][ngram] = 1
                tokens[n] += 1
    div1 = len(types[0].keys())/tokens[0]
    div2 = len(types[1].keys())/tokens[1]
    return [div1, div2]

def calc_len(hyp):
    l = []
    for line in hyp:
        l.append(len(line.strip('\n').split()))
    return np.mean(l)


def calc_rouge(hyp, ref):
    rouge = Rouge()

    rouge_scores = dict()
    rouge_scores['rouge-1'] = {'f': 0.0, 'p': 0.0, 'r':0.0}
    rouge_scores['rouge-2'] = {'f': 0.0, 'p': 0.0, 'r':0.0}
    rouge_scores['rouge-l'] = {'f': 0.0, 'p': 0.0, 'r':0.0}
    error_count = 0
    for idx, t in enumerate(zip(hyp, ref)):
        x = t[0]
        y = t[1]
        try:
            score = rouge.get_scores(x, y)[0]
            rouge_scores['rouge-1']['f'] += score['rouge-1']['f']
            rouge_scores['rouge-1']['p'] += score['rouge-1']['p']
            rouge_scores['rouge-1']['r'] += score['rouge-1']['r']
            rouge_scores['rouge-2']['f'] += score['rouge-2']['f']
            rouge_scores['rouge-2']['p'] += score['rouge-2']['p']
            rouge_scores['rouge-2']['r'] += score['rouge-2']['r']
            rouge_scores['rouge-l']['f'] += score['rouge-l']['f']
            rouge_scores['rouge-l']['p'] += score['rouge-l']['p']
            rouge_scores['rouge-l']['r'] += score['rouge-l']['r']
        except:
            error_count += 1

    rouge_scores['rouge-1']['f'] /= (idx + 1)
    rouge_scores['rouge-1']['p'] /= (idx + 1)
    rouge_scores['rouge-1']['r'] /= (idx + 1)
    rouge_scores['rouge-2']['f'] /= (idx + 1)
    rouge_scores['rouge-2']['p'] /= (idx + 1)
    rouge_scores['rouge-2']['r'] /= (idx + 1)
    rouge_scores['rouge-l']['f'] /= (idx + 1)
    rouge_scores['rouge-l']['p'] /= (idx + 1)
    rouge_scores['rouge-l']['r'] /= (idx + 1)

    return rouge_scores


def calc_metrics(path_refs, path_hyp):
    #  nist, sbleu, bleu, meteor, entropy, diversity, avg_len = nlp_metrics(
    #        path_refs=["answers-" + mode + ".txt"], path_hyp="responses-" + mode + ".txt")
    bleu, entropy, diversity, avg_len = calc_nlp_metrics(
          path_refs=[path_refs], path_hyp=path_hyp)
    #  print(f'nist: {nist}')
    print(f'bleu: {bleu}')
    #  print(f'smoothed_bleu: {sbleu}')
    #  print(f'meteor: {meteor}')
    print(f'entropy: {entropy}')
    print(f'diversity: {diversity}')
    print(f'avg_len: {avg_len}')
    
    metrics = {'bleu': bleu, 
            'diversity': diversity, 
            'entropy': entropy, 
            'avg_len': avg_len
            }
    return metrics

    #  write_nist_file(['answers.txt'], 'responses.txt', ['posts.txt'])
    #  get nist score and bleu score
    #  perl mteval-v14c-20190801/mteval-v14c.pl -s nist/src.xml -t nist/hyp.xml -r nist/ref.xml
    #  perl mteval-v14c-20190801/mteval-v14c.pl -s nist/src.xml -t nist/hyp.xml -r nist/post.xml

    #  get meteor score
    #  java -Xmx1g -jar meteor-1.5/meteor-1.5.jar responses.txt answers.txt -r 1 -l en -norm
    #  java -Xmx1g -jar meteor-1.5/meteor-1.5.jar responses.txt posts.txt -r 1 -l en -norm

    #  answer_text = open('answers-' + mode + '.txt', encoding='utf-8').readlines()
    #  answer_sen = [s.strip('\n') for s in answer_text]
    #  response_text = open('responses-' + mode + '.txt', encoding='utf-8').readlines()
    #  response_sen = [s.strip('\n') for s in response_text]
    #  post_text = open('posts-' + mode + '.txt', encoding='utf-8').readlines()
    #  post_sen = [s.strip('\n') for s in post_text]


    #get entropy score
    #  entropy_score = calc_entropy(response_text)
    #  print('entropy score:')
    #  print(entropy_score)

    #get diversity score
    #  diversity_score = calc_diversity(response_text)
    #  print('diversity score:')
    #  print(diversity_score)

    #get len
    #  len = calc_len(response_text)
    #  print('average len:')
    #  print(len)

    #get rouge score
    #  rouge_scores = calc_rouge(response_sen, answer_sen)
    #  print('rouge score:')
    #  print(rouge_scores)

    #  novel_rouge_scores = calc_rouge(response_sen, post_sen)
    #  print('novel rouge score:')
    #  print(novel_rouge_scores)
